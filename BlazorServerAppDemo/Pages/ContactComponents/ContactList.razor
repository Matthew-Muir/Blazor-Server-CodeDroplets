@inject IJSRuntime jsRuntime
<input type="checkbox" @bind="DisplayEmail" /><label>Display Email</label>

@if (displayContacts)
{
    @if(Contacts == null)
{
    @NullContacts
}
else if(Contacts.Count == 0){
    @Empty
}
else
{
 @foreach (var contact in Contacts)
    {
        <ContactComponet01 DeleteCurrentContact="RequestPermission" CurrentContact="contact" DisplayEmail="@DisplayEmail"></ContactComponet01>
    }   
}
}


<DeleteConfirmation @ref="deleteConfirmation" OnConfirmed="OnDeleteConfirmed"></DeleteConfirmation>

@code {

    private async Task OnDeleteConfirmed(Contact contact)
    {
        Contacts.Remove(contact);
        deleteConfirmation.Hide();
    }

    [Parameter]
    public RenderFragment NullContacts { get; set; }
    [Parameter]
    public RenderFragment Empty { get; set; }
    [Parameter]
    public List<Contact> Contacts { get; set; }

    private bool displayContacts = true;
    private bool DisplayEmail = true;
    private DeleteConfirmation deleteConfirmation;


    private async Task RequestPermission(Contact contact)
    {
        //var confirm = await jsRuntime.InvokeAsync<bool>("confirm", "Delete?");
        //if(confirm)
        //{
        //    Contacts.Remove(contact);
        //}
        deleteConfirmation.BodyContent = $"Are you sure you want to delete {contact.FirstName} {contact.LastName}?";
        deleteConfirmation.ContactToDelete = contact;
        deleteConfirmation.Show();
    }

    public void ShowContacts() => displayContacts = true;
    public void Hidecontacts() => displayContacts = false;

}